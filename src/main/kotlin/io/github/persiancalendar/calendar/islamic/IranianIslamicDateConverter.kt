package io.github.persiancalendar.calendar.islamic

/**
 * It uses the data provided in https://github.com/roozbehp/qamari/blob/main/consolidated.txt
 *
 * Historically it was inspired from the idea of https://github.com/ilius/starcal/blob/main/scal3/cal_types/hijri-monthes.json
 * And it was extended by https://web.archive.org/web/20240518065835/https://calendar.ut.ac.ir/Fa/Software/CalConv.asp which
 * is now defunct and we now use our own data.
 */
object IranianIslamicDateConverter {
    // This is a package public API used in the app
    const val latestSupportedYearOfIran = 1404
    private const val SUPPORTED_START_JDN = 2_396_005L
    private const val SUPPORTED_START_YEAR = 1265 - 1/*one year is just added to make the rest fit*/
    private val jdSupportEnd: Long
    private val months: IntArray
    private val supportedYears: Int

    init {
        // 1 -> 30, 0 -> 29
        val hijriMonths = shortArrayOf(
            /*1264*/ 0b1_0_1_0_1_0_0_1_0_1_1_1,/**/
            /*1265*/ 0b1_0_1_0_1_0_1_0_1_0_1_0,
            /*1266*/ 0b1_0_1_0_1_1_0_1_0_1_0_1,
            /*1267*/ 0b0_1_0_1_1_0_0_1_0_1_0_0,
            /*1268*/ 0b1_0_1_1_1_0_1_0_1_0_1_0,
            /*1269*/ 0b0_1_0_1_1_0_1_1_0_1_0_1,
            /*1270*/ 0b0_1_0_0_1_0_1_1_0_1_1_0,
            /*1271*/ 0b1_0_1_0_0_1_0_1_0_1_1_1,
            /*1272*/ 0b0_1_0_1_0_0_1_0_1_0_1_1,
            /*1273*/ 0b0_1_1_0_1_0_1_0_0_0_1_1,
            /*1274*/ 0b0_1_1_0_1_1_0_1_0_0_0_1,
            /*1275*/ 0b1_0_1_0_1_1_1_0_1_0_0_1,
            /*1276*/ 0b0_1_0_1_0_1_1_0_1_0_1_0,
            /*1277*/ 0b1_0_1_0_0_1_1_0_1_1_0_1,
            /*1278*/ 0b0_1_0_1_0_0_1_0_1_1_0_1,
            /*1279*/ 0b1_1_0_0_1_0_0_1_0_1_0_1,
            /*1280*/ 0b1_1_1_0_0_1_0_0_1_0_1_0,
            /*1281*/ 0b1_1_1_0_1_0_1_0_0_1_0_1,
            /*1282*/ 0b0_1_1_0_1_0_1_1_0_1_0_0,
            /*1283*/ 0b1_0_0_1_1_0_1_1_1_0_1_0,
            /*1284*/ 0b0_1_0_1_0_0_1_1_1_0_1_1,
            /*1285*/ 0b0_0_1_0_0_1_0_1_1_0_1_1,
            /*1286*/ 0b0_1_0_1_0_0_1_0_1_0_1_1,
            /*1287*/ 0b1_0_1_0_0_1_0_1_0_1_0_1,
            /*1288*/ 0b1_0_1_0_1_0_1_0_1_0_1_0,
            /*1289*/ 0b1_0_1_1_0_1_0_1_1_0_0_1,
            /*1290*/ 0b0_1_0_1_0_1_1_1_0_1_0_0,
            /*1291*/ 0b1_0_0_1_0_1_1_1_1_0_1_0,
            /*1292*/ 0b0_1_0_0_1_0_1_1_1_0_1_0,
            /*1293*/ 0b1_0_1_0_0_1_0_1_1_0_1_0,
            /*1294*/ 0b1_1_0_1_0_0_1_1_0_1_0_0,
            /*1295*/ 0b1_1_1_0_1_0_1_1_0_0_0_1,
            /*1296*/ 0b0_1_1_0_1_1_0_1_1_0_0_0,
            /*1297*/ 0b1_0_1_0_1_1_1_0_1_1_0_0,
            /*1298*/ 0b0_1_0_1_0_1_0_1_1_1_0_0,
            /*1299*/ 0b1_0_1_0_0_1_1_0_1_1_1_0,
            /*1300*/ 0b0_1_0_1_0_0_1_1_0_1_1_0,
            /*1301*/ 0b1_0_1_0_1_0_1_0_0_1_1_0,
            /*1302*/ 0b1_0_1_1_0_1_0_1_0_0_1_0,
            /*1303*/ 0b1_0_1_1_1_0_1_0_1_0_0_1,
            /*1304*/ 0b0_0_1_1_1_0_1_1_0_1_0_0,
            /*1305*/ 0b1_0_0_1_1_1_0_1_1_0_1_0,
            /*1306*/ 0b0_1_0_1_0_1_0_1_1_0_1_0,
            /*1307*/ 0b1_0_1_0_1_0_1_0_1_0_1_0,
            /*1308*/ 0b1_1_0_1_0_1_0_0_1_0_1_0,
            /*1309*/ 0b1_1_1_0_1_0_1_0_0_1_0_1,
            /*1310*/ 0b0_1_1_1_0_1_0_1_0_0_1_0,
            /*1311*/ 0b1_0_1_1_0_1_1_0_1_0_0_1,
            /*1312*/ 0b0_1_0_1_1_0_1_1_0_1_0_0,
            /*1313*/ 0b1_0_1_0_1_0_1_0_1_1_0_1,
            /*1314*/ 0b0_1_1_0_0_1_0_1_0_1_1_0,
            /*1315*/ 0b1_1_0_1_0_0_1_0_0_1_1_0,
            /*1316*/ 0b1_1_1_0_1_0_0_1_0_0_1_0,
            /*1317*/ 0b1_1_1_1_0_1_0_0_1_0_0_1,
            /*1318*/ 0b0_1_1_1_0_1_0_1_0_1_0_0,
            /*1319*/ 0b1_0_1_1_0_1_0_1_1_0_1_0,
            /*1320*/ 0b1_0_0_1_1_0_0_1_1_0_1_1,
            /*1321*/ 0b0_1_0_0_1_0_0_1_1_0_1_1,
            /*1322*/ 0b1_0_0_1_0_1_0_0_1_0_1_1,
            /*1323*/ 0b1_0_1_1_0_0_1_0_0_1_0_1,
            /*1324*/ 0b1_1_0_1_0_1_0_1_0_0_1_0,
            /*1325*/ 0b1_1_0_1_0_1_1_0_1_0_1_0,
            /*1326*/ 0b0_1_0_1_0_1_1_0_1_1_0_1,
            /*1327*/ 0b0_0_1_0_1_0_1_1_0_1_1_0,
            /*1328*/ 0b1_0_1_0_0_0_1_1_0_1_1_1,
            /*1329*/ 0b0_1_0_0_1_0_0_1_1_0_1_1,
            /*1330*/ 0b0_1_1_0_0_1_0_0_1_1_0_1,
            /*1331*/ 0b0_1_1_0_1_0_1_0_1_0_1_0,
            /*1332*/ 0b1_0_1_1_0_1_0_1_0_1_0_1,
            /*1333*/ 0b0_0_1_1_0_1_0_1_1_1_0_0,
            /*1334*/ 0b1_0_0_1_0_1_1_0_1_1_1_0,
            /*1335*/ 0b0_1_0_0_1_0_1_0_1_1_1_1,
            /*1336*/ 0b0_0_1_0_0_1_0_1_0_1_1_1,
            /*1337*/ 0b0_0_1_1_0_0_1_0_1_0_1_1,
            /*1338*/ 0b0_1_0_1_1_0_0_1_0_1_0_1,
            /*1339*/ 0b0_0_1_1_1_0_1_0_1_0_1_0,
            /*1340*/ 0b0_1_0_1_1_1_0_1_1_0_0_1,
            /*1341*/ 0b0_0_1_0_1_1_0_1_1_0_1_0,
            /*1342*/ 0b1_0_0_1_0_1_0_1_1_1_0_1,
            /*1343*/ 0b0_0_1_0_1_0_1_0_1_0_1_1,
            /*1344*/ 0b0_1_0_1_0_1_0_1_0_1_0_1,
            /*1345*/ 0b0_1_1_0_1_1_0_0_1_0_0_1,
            /*1346*/ 0b0_1_1_0_1_1_1_0_0_1_0_0,
            /*1347*/ 0b1_0_1_1_0_1_1_0_1_0_1_0,
            /*1348*/ 0b0_1_0_1_1_0_1_1_0_1_0_1,
            /*1349*/ 0b0_0_1_0_1_0_1_1_0_1_1_0,
            /*1350*/ 0b1_0_0_1_1_0_0_1_0_1_1_0,
            /*1351*/ 0b1_1_0_1_0_1_0_0_1_0_1_0,
            /*1352*/ 0b1_1_0_1_1_1_0_0_0_1_0_1,
            /*1353*/ 0b0_1_1_1_0_1_0_1_0_0_1_0,
            /*1354*/ 0b0_1_1_1_1_0_1_0_0_1_0_1,
            /*1355*/ 0b0_0_1_1_0_1_1_0_1_0_1_0,
            /*1356*/ 0b1_0_0_1_1_0_1_0_1_1_0_1,
            /*1357*/ 0b0_1_0_1_0_1_0_0_1_1_0_1,
            /*1358*/ 0b1_0_1_0_1_0_0_1_0_1_0_1,
            /*1359*/ 0b1_1_0_1_0_1_0_0_1_0_0_1,
            /*1360*/ 0b1_1_0_1_1_0_1_0_0_1_0_1,
            /*1361*/ 0b0_1_0_1_1_0_1_1_0_0_1_0,
            /*1362*/ 0b1_0_1_0_1_1_0_1_0_1_0_1,
            /*1363*/ 0b0_1_0_1_0_1_0_1_0_1_1_0,
            /*1364*/ 0b1_0_1_0_0_1_0_1_0_1_1_1,
            /*1365*/ 0b0_1_0_1_0_0_1_0_1_0_1_1,
            /*1366*/ 0b0_1_1_0_1_0_0_1_0_1_0_1,
            /*1367*/ 0b1_0_1_1_0_1_0_0_1_0_1_0,
            /*1368*/ 0b1_0_1_1_0_1_1_0_0_1_0_1,
            /*1369*/ 0b0_1_0_1_0_1_1_0_1_0_1_1,
            /*1370*/ 0b0_0_1_0_1_0_1_0_1_1_0_1,
            /*1371*/ 0b0_1_0_1_0_1_0_0_1_1_1_0,
            /*1372*/ 0b1_1_0_0_1_0_0_1_0_1_1_1,
            /*1373*/ 0b0_1_0_1_0_1_0_0_1_0_1_1,
            /*1374*/ 0b0_1_1_0_1_0_1_0_0_1_0_1,
            /*1375*/ 0b0_1_1_0_1_1_0_1_0_0_1_0,
            /*1376*/ 0b1_0_1_0_1_1_0_1_1_0_0_1,
            /*1377*/ 0b0_1_0_0_1_1_0_1_1_1_0_1,
            /*1378*/ 0b0_0_1_0_0_1_0_1_0_1_1_1,
            /*1379*/ 0b1_0_0_1_0_0_1_0_1_1_0_1,
            /*1380*/ 0b1_0_1_0_1_0_0_1_0_1_0_1,
            /*1381*/ 0b1_0_1_1_0_1_0_1_0_0_1_0,
            /*1382*/ 0b1_0_1_1_0_1_1_0_1_0_0_1,
            /*1383*/ 0b0_0_1_1_0_1_1_1_0_1_0_0,
            /*1384*/ 0b1_0_0_1_0_1_1_1_0_1_1_0,
            /*1385*/ 0b0_1_0_0_1_0_1_1_0_1_1_1,
            /*1386*/ 0b0_0_1_0_0_1_0_1_0_1_1_1,
            /*1387*/ 0b0_1_0_1_0_1_0_0_1_0_1_1,
            /*1388*/ 0b0_1_1_0_1_0_1_0_0_1_0_1,
            /*1389*/ 0b0_1_1_0_1_1_0_1_0_0_1_0,
            /*1390*/ 0b1_0_1_0_1_1_1_0_1_0_1_0,
            /*1391*/ 0b0_1_0_0_1_1_1_0_1_1_0_1,
            /*1392*/ 0b0_0_1_0_0_1_1_0_1_1_0_1,
            /*1393*/ 0b1_0_0_1_0_0_1_1_0_1_0_1,
            /*1394*/ 0b1_1_0_1_0_0_1_0_0_1_0_1,
            /*1395*/ 0b1_1_0_1_0_1_0_1_0_0_0_1,
            /*1396*/ 0b1_0_1_1_1_0_1_0_1_0_0_1,
            /*1397*/ 0b0_1_0_1_1_1_0_1_0_1_0_0,
            /*1398*/ 0b1_0_1_0_1_0_1_1_0_1_0_1,
            /*1399*/ 0b0_1_0_1_0_0_1_1_0_1_1_0,
            /*1400*/ 0b1_0_1_0_1_0_0_1_0_1_1_1,
            /*1401*/ 0b0_1_1_0_0_1_0_0_1_0_1_0,
            /*1402*/ 0b1_1_1_0_1_0_1_0_0_1_0_1,
            /*1403*/ 0b0_1_1_1_0_1_0_1_0_0_1_0,
            /*1404*/ 0b1_0_1_1_1_0_1_0_1_0_0_1,
            /*1405*/ 0b0_1_0_1_1_0_1_1_0_1_0_1,
            /*1406*/ 0b0_0_1_0_1_0_1_1_0_1_0_1,
            /*1407*/ 0b1_0_1_0_0_1_0_1_0_1_1_0,
            /*1408*/ 0b1_1_0_1_0_0_1_0_0_1_1_0,
            /*1409*/ 0b1_1_1_0_0_1_0_1_0_0_1_1,
            /*1410*/ 0b0_1_1_0_1_0_1_0_1_0_0_1,
            /*1411*/ 0b1_1_0_1_0_1_0_1_0_1_0_0,
            /*1412*/ 0b1_1_0_1_0_1_0_1_0_1_1_0,
            /*1413*/ 0b1_0_1_0_0_1_0_1_0_1_1_1,
            /*1414*/ 0b0_1_0_0_1_0_1_0_0_1_1_1,
            /*1415*/ 0b1_1_0_0_0_1_0_0_0_1_1_1,
            /*1416*/ 0b1_1_0_1_0_0_1_0_0_1_1_0,
            /*1417*/ 0b1_1_1_0_0_1_0_1_0_1_0_0,
            /*1418*/ 0b1_1_0_1_1_0_1_0_0_1_1_0,
            /*1419*/ 0b0_1_0_1_0_1_1_0_0_1_1_1,
            /*1420*/ 0b0_0_1_0_1_0_1_1_0_1_1_0,
            /*1421*/ 0b1_0_0_1_0_0_1_1_0_1_1_1,
            /*1422*/ 0b0_1_0_0_1_0_0_1_0_1_1_1,
            /*1423*/ 0b0_1_1_0_0_1_0_1_0_1_0_1,
            /*1424*/ 0b1_0_1_0_1_0_1_0_1_0_1_0,
            /*1425*/ 0b1_0_1_1_0_1_1_0_0_1_0_1,
            /*1426*/ 0b0_0_1_0_1_1_1_0_1_1_0_0,
            /*1427*/ 0b1_0_0_1_0_1_1_1_0_1_0_1,
            /*1428*/ 0b0_1_0_0_0_1_1_0_1_1_1_0,
            /*1429*/ 0b1_0_1_0_0_0_1_1_0_1_1_0,
            /*1430*/ 0b1_1_0_0_1_0_1_0_0_1_1_0,
            /*1431*/ 0b1_1_0_1_0_1_0_1_0_0_1_0,
            /*1432*/ 0b1_1_0_1_1_1_0_1_0_0_1_0,
            /*1433*/ 0b0_1_0_1_1_1_0_1_0_1_0_1,
            /*1434*/ 0b0_0_1_0_1_1_0_1_1_0_1_0,
            /*1435*/ 0b0_1_0_1_0_1_0_1_1_1_0_1,
            /*1436*/ 0b0_1_0_0_1_0_1_0_1_0_1_1,
            /*1437*/ 0b0_1_1_0_1_0_0_1_0_0_1_1,
            /*1438*/ 0b0_1_1_1_0_1_0_0_1_0_0_1,
            /*1439*/ 0b0_1_1_1_1_0_1_0_0_1_0_0,
            /*1440*/ 0b1_0_1_1_1_0_1_1_0_0_1_0,
            /*1441*/ 0b0_1_0_1_1_0_1_1_0_1_0_1,
            /*1442*/ 0b0_0_1_0_1_0_1_1_0_1_1_0,
            /*1443*/ 0b0_1_1_0_0_1_0_1_1_0_1_0,
            /*1444*/ 0b1_1_0_1_0_0_1_0_1_0_1_0,
            /*1445*/ 0b1_1_1_0_1_0_0_1_0_1_0_0,
            /*1446*/ 0b1_1_1_0_1_1_0_1_0_0_0_1,
            /*1447*/ 0b0_1_1_0_1_1_1_0_1_____0_0_0,
            /*1448*/ 0b1_0_1_0_1_1_0_1_1_0_1_0,
            /*1449*/ 0b1_0_0_1_0_1_0_1_1_1_0_0,
        )
        supportedYears = hijriMonths.size
        months = IntArray(hijriMonths.size * 12)
        var jd = 0
        repeat(hijriMonths.size * 12) { m ->
            months[m] = jd
            jd += if (hijriMonths[m / 12].toInt() shr (11 - m % 12) and 1 == 1) 30 else 29
        }
        jdSupportEnd = jd + SUPPORTED_START_JDN
    }

    internal fun toJdn(year: Int, month: Int, day: Int): Long {
        val yearIndex = year - SUPPORTED_START_YEAR
        return if (yearIndex < 0 || yearIndex >= supportedYears) -1
        else months[yearIndex * 12 + month - 1] + day + SUPPORTED_START_JDN - 1
    }

    internal fun fromJdn(jd: Long): IntArray? {
        if (jd < SUPPORTED_START_JDN || jd >= jdSupportEnd) return null
        val days = (jd - SUPPORTED_START_JDN).toInt()
        var index = days / 30
        while (index + 1 < months.size && months[index + 1] <= days) ++index
        val yearIndex = index / 12
        val month = index % 12
        val day = days - months[index]
        return intArrayOf(yearIndex + SUPPORTED_START_YEAR, month + 1, day + 1)
    }
}
